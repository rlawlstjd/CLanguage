<?xml version="1.0" encoding="UTF-8"?>
<section name="Workbench">
	<item key="hasShownOverlayPopupBefore" value="true"/>
	<item key="replaceBarOpen" value="true"/>
	<list key="searchhistory">
		<item value="Autowired"/>
		<item value="request"/>
		<item value="addAll"/>
		<item value="adAll"/>
		<item value="a"/>
		<item value="add"/>
		<item value="close"/>
		<item value="/*&#x0A; * Copyright 2022. 이신만 &lt;rngooqw@gmail.com&gt; All rights reserved.&#x0A; */&#x0A;package com.lcomputerstudy.books.java.ch20;&#x0A;&#x0A;import java.lang.annotation.Documented;&#x0A;import java.lang.annotation.ElementType;&#x0A;import java.lang.annotation.Inherited;&#x0A;import java.lang.annotation.Repeatable;&#x0A;import java.lang.annotation.Retention;&#x0A;import java.lang.annotation.RetentionPolicy;&#x0A;import java.lang.annotation.Target;&#x0A;import java.lang.reflect.Method;&#x0A;import java.util.ArrayList;&#x0A;import java.util.Arrays;&#x0A;import java.util.Date;&#x0A;import java.util.HashMap;&#x0A;import java.util.List;&#x0A;import java.util.Map;&#x0A;import java.util.Scanner;&#x0A;&#x0A;@Settings(version=1.1, author={&quot;A&quot;, &quot;B&quot;})&#x0A;public class Ex01Annotation {&#x0A;&#x0A;&#x09;public static void main(String[] args) {&#x0A;&#x09;&#x09;System.out.println(&quot;&lt; Annotation 값 얻어 오기 &gt;&quot;);&#x0A;&#x09;&#x09;Settings settings = Ex01Annotation.class.getAnnotation(Settings.class);&#x0A;&#x09;&#x09;System.out.println(settings.version());&#x0A;&#x09;&#x09;System.out.println(Arrays.toString(settings.author()));&#x0A;&#x09;&#x09;System.out.println();&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;System.out.println(&quot;&lt; @Repeatable &gt;&quot;);&#x0A;&#x09;&#x09;Role[] arrRole = Car.class.getAnnotationsByType(Role.class);&#x0A;&#x09;&#x09;for (Role role : arrRole) {&#x0A;&#x09;&#x09;&#x09;System.out.println(role.value());&#x0A;&#x09;&#x09;}&#x0A;&#x09;&#x09;System.out.println();&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;System.out.println(&quot;&lt; @Inherited &gt;&quot;);&#x0A;&#x09;&#x09;System.out.println(Arrays.toString(NewCar.class.getAnnotations()));&#x0A;&#x09;&#x09;System.out.println();&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;Scanner scanner = new Scanner(System.in);&#x0A;&#x09;&#x09;Map&lt;String, Method&gt; handlerMapping = new HashMap&lt;&gt;();&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;for (Method method : Car.class.getDeclaredMethods()) {&#x0A;&#x09;&#x09;&#x09;RequestMapping requestMapping = method.getAnnotation(RequestMapping.class);&#x0A;&#x09;&#x09;&#x09;if (requestMapping != null)&#x0A;&#x09;&#x09;&#x09;&#x09;handlerMapping.put(requestMapping.value(), method);&#x09;&#x09;&#x09;&#x0A;&#x09;&#x09;}&#x0A;&#x09;&#x09;handlerMapping.forEach((k, v) -&gt; System.out.println(&quot;command: &quot; + k + &quot;, method: &quot; + v.getName()));&#x0A;&#x09;&#x09;System.out.println();&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;while (true) {&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;명령어를 입력하세요(engine, name, quit): &quot;);&#x0A;&#x09;&#x09;&#x09;String command = scanner.nextLine();&#x0A;&#x09;&#x09;&#x09;try {&#x0A;&#x09;&#x09;&#x09;&#x09;if (handlerMapping.get(command) != null) {&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;String returnStr = (String)handlerMapping.get(command).invoke(Car.class.newInstance());&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;System.out.println(returnStr);&#x0A;&#x09;&#x09;&#x09;&#x09;} else {&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;잘못된 명령어를 입력하였습니다.&quot;);&#x0A;&#x09;&#x09;&#x09;&#x09;}&#x0A;&#x09;&#x09;&#x09;} catch (Exception e) {&#x0A;&#x09;&#x09;&#x09;&#x09;e.printStackTrace();&#x0A;&#x09;&#x09;&#x09;}&#x0A;&#x09;&#x09;}&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;// @Documented -&gt; Javadoc&#x0A;&#x09;&#x09;// @Inherited&#x09;&#x0A;&#x09;}&#x0A;&#x0A;}&#x0A;&#x0A;@Role(&quot;Manager&quot;)&#x0A;@Role(&quot;User&quot;)&#x0A;class Car {&#x0A;&#x09;@SuppressWarnings(&quot;rawtypes&quot;) &#x0A;&#x09;private List tires = new ArrayList();&#x0A;&#x09;&#x0A;&#x09;@RequestMapping(&quot;name&quot;)&#x0A;&#x09;public String getName() {&#x0A;&#x09;&#x09;return &quot;자동차의 이름은 소나타입니다.&quot;;&#x0A;&#x09;}&#x0A;&#x09;@RequestMapping(&quot;engine&quot;)&#x0A;&#x09;public String runEngine() {&#x0A;&#x09;&#x09;return &quot;엔진이 가동됩니다.&quot;;&#x0A;&#x09;}&#x0A;&#x09;@RequestMapping(&quot;quit&quot;)&#x0A;&#x09;public String quit() {&#x0A;&#x09;&#x09;System.out.println(&quot;프로그램이 종료됩니다.&quot;);&#x0A;&#x09;&#x09;System.exit(0);&#x0A;&#x09;&#x09;return null;&#x0A;&#x09;}&#x0A;&#x09;&#x0A;&#x09;@SuppressWarnings({&quot;unchecked&quot;, &quot;unused&quot;, &quot;deprecation&quot;})&#x0A;&#x09;public void addTire(String tire) {&#x0A;&#x09;&#x09;tires.add(tire);&#x09;&#x09;&#x09;&#x09;&#x09;// unchecked&#x0A;&#x09;&#x09;String tireName = &quot;Abc Tire&quot;;&#x09;&#x09;// unused&#x0A;&#x09;&#x09;Date date = new Date();&#x0A;&#x09;&#x09;date.getYear();&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;// deprecation&#x0A;&#x09;}&#x0A;&#x09;@Deprecated&#x0A;&#x09;public static void printVersion() {&#x0A;&#x09;&#x09;System.out.println(&quot;v1.0&quot;);&#x0A;&#x09;}&#x0A;&#x09;&#x0A;}&#x0A;&#x0A;class NewCar extends Car {&#x0A;&#x09;@Override&#x0A;&#x09;public String getName() {&#x0A;&#x09;&#x09;return &quot;[New]&quot; + super.getName();&#x0A;&#x09;}&#x0A;}&#x0A;&#x0A;@Deprecated&#x0A;class OldCar {&#x0A;&#x09;&#x0A;}&#x0A;&#x0A;@Retention(RetentionPolicy.RUNTIME)&#x0A;@Target(ElementType.METHOD)&#x0A;@interface RequestMapping {&#x0A;    String value();&#x0A;}&#x0A;&#x0A;@Retention(RetentionPolicy.RUNTIME)&#x0A;@Target(ElementType.TYPE)&#x0A;@Documented&#x0A;@interface Settings {&#x0A;   String lang() default &quot;kor&quot;;&#x0A;   double version() default 1.0;&#x0A;   String[] author();&#x0A;}&#x0A;&#x0A;@Inherited&#x0A;@Repeatable(value = Roles.class)&#x0A;@Retention(RetentionPolicy.RUNTIME)&#x0A;@interface Role {&#x0A;&#x09;String value();&#x0A;}&#x0A;&#x0A;@Inherited&#x0A;@Target({ElementType.TYPE, ElementType.FIELD})&#x0A;@Retention(RetentionPolicy.RUNTIME)&#x0A;@interface Roles {&#x0A;    Role[] value();&#x0A;}&#x0A;&#x0A;/*&#x0A; * &lt;메타 어노테이션&gt;&#x0A; * @Retention&#x0A; * &#x09;&#x09;RetentionPolicy.SOURCE&#x0A; * &#x09;&#x09;RetentionPolicy.CLASS&#x0A; * &#x09;&#x09;RetentionPolicy.RUNTIME&#x0A; *&#x0A; * @Target&#x0A; * &#x09;&#x09;ElementType.ANNOTATION_TYPE&#x0A; * &#x09;&#x09;ElementType.CONSTRUCTOR&#x0A; * &#x09;&#x09;ElementType.FIELD&#x0A; * &#x09;&#x09;ElementType.LOCAL_VARIABLE&#x0A; * &#x09;&#x09;ElementType.METHOD&#x0A; * &#x09;&#x09;ElementType.PACKAGE&#x0A; * &#x09;&#x09;ElementType.PARAMETER&#x0A; * &#x09;&#x09;ElementType.TYPE&#x0A; * &#x0A; * @Inherited&#x0A; * @Repeatable&#x0A; * @Documented&#x0A; */&#x0A;&#x0A;/*&#x0A;문제 1.&#x0A;필드에 @Autowired(&quot;원하는 내용&quot;) 어노테이션을 적용 할 경우 필드의 값을 value로 초기화하는 코드를 작성하세요. &#x0A;/*&#x0A; * Copyright 2022. 이신만 &lt;rngooqw@gmail.com&gt; All rights reserved.&#x0A; */&#x0A;package com.lcomputerstudy.books.java.ch20;&#x0A;&#x0A;import java.lang.annotation.Documented;&#x0A;import java.lang.annotation.ElementType;&#x0A;import java.lang.annotation.Inherited;&#x0A;import java.lang.annotation.Repeatable;&#x0A;import java.lang.annotation.Retention;&#x0A;import java.lang.annotation.RetentionPolicy;&#x0A;import java.lang.annotation.Target;&#x0A;import java.lang.reflect.Method;&#x0A;import java.util.ArrayList;&#x0A;import java.util.Arrays;&#x0A;import java.util.Date;&#x0A;import java.util.HashMap;&#x0A;import java.util.List;&#x0A;import java.util.Map;&#x0A;import java.util.Scanner;&#x0A;&#x0A;@Settings(version=1.1, author={&quot;A&quot;, &quot;B&quot;})&#x0A;public class Ex01Annotation {&#x0A;&#x0A;&#x09;public static void main(String[] args) {&#x0A;&#x09;&#x09;System.out.println(&quot;&lt; Annotation 값 얻어 오기 &gt;&quot;);&#x0A;&#x09;&#x09;Settings settings = Ex01Annotation.class.getAnnotation(Settings.class);&#x0A;&#x09;&#x09;System.out.println(settings.version());&#x0A;&#x09;&#x09;System.out.println(Arrays.toString(settings.author()));&#x0A;&#x09;&#x09;System.out.println();&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;System.out.println(&quot;&lt; @Repeatable &gt;&quot;);&#x0A;&#x09;&#x09;Role[] arrRole = Car.class.getAnnotationsByType(Role.class);&#x0A;&#x09;&#x09;for (Role role : arrRole) {&#x0A;&#x09;&#x09;&#x09;System.out.println(role.value());&#x0A;&#x09;&#x09;}&#x0A;&#x09;&#x09;System.out.println();&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;System.out.println(&quot;&lt; @Inherited &gt;&quot;);&#x0A;&#x09;&#x09;System.out.println(Arrays.toString(NewCar.class.getAnnotations()));&#x0A;&#x09;&#x09;System.out.println();&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;Scanner scanner = new Scanner(System.in);&#x0A;&#x09;&#x09;Map&lt;String, Method&gt; handlerMapping = new HashMap&lt;&gt;();&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;for (Method method : Car.class.getDeclaredMethods()) {&#x0A;&#x09;&#x09;&#x09;RequestMapping requestMapping = method.getAnnotation(RequestMapping.class);&#x0A;&#x09;&#x09;&#x09;if (requestMapping != null)&#x0A;&#x09;&#x09;&#x09;&#x09;handlerMapping.put(requestMapping.value(), method);&#x09;&#x09;&#x09;&#x0A;&#x09;&#x09;}&#x0A;&#x09;&#x09;handlerMapping.forEach((k, v) -&gt; System.out.println(&quot;command: &quot; + k + &quot;, method: &quot; + v.getName()));&#x0A;&#x09;&#x09;System.out.println();&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;while (true) {&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;명령어를 입력하세요(engine, name, quit): &quot;);&#x0A;&#x09;&#x09;&#x09;String command = scanner.nextLine();&#x0A;&#x09;&#x09;&#x09;try {&#x0A;&#x09;&#x09;&#x09;&#x09;if (handlerMapping.get(command) != null) {&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;String returnStr = (String)handlerMapping.get(command).invoke(Car.class.newInstance());&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;System.out.println(returnStr);&#x0A;&#x09;&#x09;&#x09;&#x09;} else {&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;잘못된 명령어를 입력하였습니다.&quot;);&#x0A;&#x09;&#x09;&#x09;&#x09;}&#x0A;&#x09;&#x09;&#x09;} catch (Exception e) {&#x0A;&#x09;&#x09;&#x09;&#x09;e.printStackTrace();&#x0A;&#x09;&#x09;&#x09;}&#x0A;&#x09;&#x09;}&#x0A;&#x09;&#x09;&#x0A;&#x09;&#x09;// @Documented -&gt; Javadoc&#x0A;&#x09;&#x09;// @Inherited&#x09;&#x0A;&#x09;}&#x0A;&#x0A;}&#x0A;&#x0A;@Role(&quot;Manager&quot;)&#x0A;@Role(&quot;User&quot;)&#x0A;class Car {&#x0A;&#x09;@SuppressWarnings(&quot;rawtypes&quot;) &#x0A;&#x09;private List tires = new ArrayList();&#x0A;&#x09;&#x0A;&#x09;@RequestMapping(&quot;name&quot;)&#x0A;&#x09;public String getName() {&#x0A;&#x09;&#x09;return &quot;자동차의 이름은 소나타입니다.&quot;;&#x0A;&#x09;}&#x0A;&#x09;@RequestMapping(&quot;engine&quot;)&#x0A;&#x09;public String runEngine() {&#x0A;&#x09;&#x09;return &quot;엔진이 가동됩니다.&quot;;&#x0A;&#x09;}&#x0A;&#x09;@RequestMapping(&quot;quit&quot;)&#x0A;&#x09;public String quit() {&#x0A;&#x09;&#x09;System.out.println(&quot;프로그램이 종료됩니다.&quot;);&#x0A;&#x09;&#x09;System.exit(0);&#x0A;&#x09;&#x09;return null;&#x0A;&#x09;}&#x0A;&#x09;&#x0A;&#x09;@SuppressWarnings({&quot;unchecked&quot;, &quot;unused&quot;, &quot;deprecation&quot;})&#x0A;&#x09;public void addTire(String tire) {&#x0A;&#x09;&#x09;tires.add(tire);&#x09;&#x09;&#x09;&#x09;&#x09;// unchecked&#x0A;&#x09;&#x09;String tireName = &quot;Abc Tire&quot;;&#x09;&#x09;// unused&#x0A;&#x09;&#x09;Date date = new Date();&#x0A;&#x09;&#x09;date.getYear();&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;// deprecation&#x0A;&#x09;}&#x0A;&#x09;@Deprecated&#x0A;&#x09;public static void printVersion() {&#x0A;&#x09;&#x09;System.out.println(&quot;v1.0&quot;);&#x0A;&#x09;}&#x0A;&#x09;&#x0A;}&#x0A;&#x0A;class NewCar extends Car {&#x0A;&#x09;@Override&#x0A;&#x09;public String getName() {&#x0A;&#x09;&#x09;return &quot;[New]&quot; + super.getName();&#x0A;&#x09;}&#x0A;}&#x0A;&#x0A;@Deprecated&#x0A;class OldCar {&#x0A;&#x09;&#x0A;}&#x0A;&#x0A;@Retention(RetentionPolicy.RUNTIME)&#x0A;@Target(ElementType.METHOD)&#x0A;@interface RequestMapping {&#x0A;    String value();&#x0A;}&#x0A;&#x0A;@Retention(RetentionPolicy.RUNTIME)&#x0A;@Target(ElementType.TYPE)&#x0A;@Documented&#x0A;@interface Settings {&#x0A;   String lang() default &quot;kor&quot;;&#x0A;   double version() default 1.0;&#x0A;   String[] author();&#x0A;}&#x0A;&#x0A;@Inherited&#x0A;@Repeatable(value = Roles.class)&#x0A;@Retention(RetentionPolicy.RUNTIME)&#x0A;@interface Role {&#x0A;&#x09;String value();&#x0A;}&#x0A;&#x0A;@Inherited&#x0A;@Target({ElementType.TYPE, ElementType.FIELD})&#x0A;@Retention(RetentionPolicy.RUNTIME)&#x0A;@interface Roles {&#x0A;    Role[] value();&#x0A;}&#x0A;&#x0A;/*&#x0A; * &lt;메타 어노테이션&gt;&#x0A; * @Retention&#x0A; * &#x09;&#x09;RetentionPolicy.SOURCE&#x0A; * &#x09;&#x09;RetentionPolicy.CLASS&#x0A; * &#x09;&#x09;RetentionPolicy.RUNTIME&#x0A; *&#x0A; * @Target&#x0A; * &#x09;&#x09;ElementType.ANNOTATION_TYPE&#x0A; * &#x09;&#x09;ElementType.CONSTRUCTOR&#x0A; * &#x09;&#x09;ElementType.FIELD&#x0A; * &#x09;&#x09;ElementType.LOCAL_VARIABLE&#x0A; * &#x09;&#x09;ElementType.METHOD&#x0A; * &#x09;&#x09;ElementType.PACKAGE&#x0A; * &#x09;&#x09;ElementType.PARAMETER&#x0A; * &#x09;&#x09;ElementType.TYPE&#x0A; * &#x0A; * @Inherited&#x0A; * @Repeatable&#x0A; * @Documented&#x0A; */&#x0A;&#x0A;/*&#x0A;문제 1.&#x0A;필드에 @Autowired(&quot;원하는 내용&quot;) 어노테이션을 적용 할 경우 필드의 값을 value로 초기화하는 코드를 작성하세요. &#x0A;Repeatable"/>
		<item value="r"/>
		<item value="repeat"/>
		<item value="repeatable"/>
		<item value="flat"/>
		<item value="NavigableSet"/>
		<item value="Navi"/>
	</list>
	<list key="replacehistory">
		<item value="TreeSet"/>
	</list>
</section>
